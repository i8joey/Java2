Scenario - 
You are working for a company that licenses and customizes a software application to keep track of inventory in stores. Your job as a software developer is to customize this application to meet a specific customer’s needs. You will choose any type of customer you would like, but it must sell a product composed of parts. An example of products versus parts would be a customer that’s a bicycle shop: a bicycle is a product, and a set of two matching wheels is a part (do not use the bicycle shop example in your project).
You have been provided with a Spring application with a Java backend, a generic HTML user interface to use in the design and development of the system, and a UML class diagram to assist you in your work (see the attached “UML Class Diagram”). You can find a user guide to help assist with the inventory management application in the attachments (see “Shop Inventory Management User Guide”).



Part C
Customized HTML user interface
mainscreen.html
Line 14 - renamed the shop
Line 18 - renamed category

Part D
mainscreen.html
Line 20 - added button to redirect to /about page
Line 22 - added a separator

about.html
Created simple about page with button to link back to main page

about.java
Created about page interface

AboutPage.java
created getAbout() method

AboutController.java
Lines 8 - 22 - created controller for about page and added getAbout() to redirect to /about

Part E
BootStrapData.java
Lines 29-31 - added repositories needed
Lines 40-86 - Added 5 computer parts that are created when outsourcedPartsRepository has no parts
Lines 106-116 - Added 5 products and saved to productRepostiory

Part F
mainscreen.html
Line 88 - created button that sends productid to buynowcontroller

buynowcontroller.java
Lines 21-23 - added product and part repositories
Lines 26-54 - created /buyproduct page and redirects to different pages depending on if it is successful or not and can reroute to main page


Part G
Part.java
Lines 32-36 - created minInv and maxInv variables and ensured min cannot be less than 0 and max cannot be more than 100
Lines 50-51 - set minInv to 0 and maxInv to 100
Lines 107-121 - set getters/setters for min/maxinv

BooStrapData.java
Lines 42-87 - set min/max inv for parts manually added
inhousepart.java + outsourcedpart.java
lines 18/19 - initialized min/max inv to 0 and 100

BuyNowController.java
Lines - 31-39
Added a check to make sure there are enough parts to buy a product, if there are not enough parts it will redirect with an error message

inhousepartform.html
Lines 26-30 - added extra inputs for min/max inventory
outsourcedpartform.html
Lines 25-29 - added extra input for min/max inventory

Part H
InventoryRangeValidator.java - validinventoryrange.java
Created custom validator to ensure inventory of parts is within range

inhousepartform.html
lines - 34-38 - added error display if amount added is not within range

outsurcedpartform.html
lines 35-39 - added error display if amoutn added is not within range

buynowcontroller.java
Lines - 31-50 - added a check to see if there are enough parts to buy a product and parts stay above minimum inventory

Part I
parttest.java
Lines 160-174 - added two tests to set/get minimum and maximum inventory

Part J
Deleted deletepartvalidator and validdeletepart as they were not being used

